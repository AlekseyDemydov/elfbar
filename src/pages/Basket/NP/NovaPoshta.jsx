import React, { useState, useEffect } from 'react';
import axios from 'axios';
import styles from './CityInput.module.scss'; // —ñ–º–ø–æ—Ä—Ç—É—î–º–æ —Å—Ç–∏–ª—ñ

const API_KEY = '4c4cc38e7a31bd899f3eb60c965650ca';

const getNovaPoshtaCities = async searchString => {
  try {
    const response = await axios.post('https://api.novaposhta.ua/v2.0/json/', {
      apiKey: API_KEY,
      modelName: 'Address',
      calledMethod: 'getCities',
      methodProperties: {
        FindByString: searchString, // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ—à—É–∫—É –ø–æ –Ω–∞–∑–≤—ñ –º—ñ—Å—Ç–∞
      },
    });
    if (response.data.success) {
      return response.data.data; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ API –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏
    } else {
      throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –º—ñ—Å—Ç –≤—ñ–¥ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏');
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –º—ñ—Å—Ç –≤—ñ–¥ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏:', error);
    throw error;
  }
};

const getNovaPoshtaWarehouses = async (cityRef, category) => {
  try {
    const response = await axios.post('https://api.novaposhta.ua/v2.0/json/', {
      apiKey: API_KEY,
      modelName: 'AddressGeneral',
      calledMethod: 'getWarehouses',
      methodProperties: {
        CityRef: cityRef,
        CategoryOfWarehouse: category, // –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è —á–∏ –ø–æ—à—Ç–æ–º–∞—Ç—É
      },
    });
    if (response.data.success) {
      return response.data.data; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ API –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏
    } else {
      throw new Error(
        '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å/–ø–æ—à—Ç–æ–º–∞—Ç—ñ–≤ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏ –¥–ª—è –¥–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞'
      );
    }
  } catch (error) {
    console.error(
      '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –≤—ñ–¥–¥—ñ–ª–µ–Ω—å/–ø–æ—à—Ç–æ–º–∞—Ç—ñ–≤ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏:',
      error
    );
    throw error;
  }
};

const getNovaPoshtaStreets = async (cityRef, searchString) => {
  try {
    const response = await axios.post('https://api.novaposhta.ua/v2.0/json/', {
      apiKey: API_KEY,
      modelName: 'Address',
      calledMethod: 'getStreet',
      methodProperties: {
        CityRef: cityRef,
        FindByString: searchString, // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ—à—É–∫—É –ø–æ –Ω–∞–∑–≤—ñ –≤—É–ª–∏—Ü—ñ
      },
    });
    if (response.data.success) {
      return response.data.data; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∑ API –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏
    } else {
      throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—É–ª–∏—Ü—å –≤—ñ–¥ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏');
    }
  } catch (error) {
    console.error(
      '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –≤—É–ª–∏—Ü—å –≤—ñ–¥ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏:',
      error
    );
    throw error;
  }
};

const getNovaPoshtaHouseNumbers = async (cityRef, streetRef, searchString) => {
  try {
    const response = await axios.post('https://api.novaposhta.ua/v2.0/json/', {
      apiKey: API_KEY,
      modelName: 'Address',
      calledMethod: 'getBuildings',
      methodProperties: {
        CityRef: cityRef,
        StreetRef: streetRef,
        FindByString: searchString, // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ—à—É–∫—É –ø–æ –Ω–æ–º–µ—Ä—É –±—É–¥–∏–Ω–∫—É
      },
    });
    if (response.data.success) {
      return response.data.data.filter(building =>
        building.Description.toLowerCase().includes(searchString.toLowerCase())
      ); // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞ –≤–≤–µ–¥–µ–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º
    } else {
      throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –±—É–¥–∏–Ω–∫—ñ–≤ –≤—ñ–¥ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏');
    }
  } catch (error) {
    console.error(
      '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –±—É–¥–∏–Ω–∫—ñ–≤ –≤—ñ–¥ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏:',
      error
    );
    throw error;
  }
};

const CityInput = ({
  defaultDeliveryMethod,
  onUpdateCity,
  onUpdateStreet,
  onUpdateHouseNumber,
  onUpdateWarehouses,
  onApartmentChange,
}) => {
  const [inputValue, setInputValue] = useState('');
  const [selectedCity, setSelectedCity] = useState(null);
  const [deliveryMethod, setDeliveryMethod] = useState(defaultDeliveryMethod); // –û–¥–∏–Ω –æ–±—Ä–∞–Ω–∏–π –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏
  const [suggestions, setSuggestions] = useState([]);
  const [warehouses, setWarehouses] = useState([]);
  const [streets, setStreets] = useState([]);
  const [streetInputValue, setStreetInputValue] = useState(''); // –î–æ–¥–∞—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –≤—É–ª–∏—Ü—ñ
  const [selectedStreet, setSelectedStreet] = useState(null);
  const [houseNumbers, setHouseNumbers] = useState([]);
  const [houseNumberInputValue, setHouseNumberInputValue] = useState(''); // –î–æ–¥–∞—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –±—É–¥–∏–Ω–∫—É
  const [showSuggestions, setShowSuggestions] = useState(true); // –î–ª—è –ø–æ–∫–∞–∑—É –∞–±–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—ñ–¥–∫–∞–∑–æ–∫
  const [showStreetSuggestions, setShowStreetSuggestions] = useState(false); // –î–ª—è –ø–æ–∫–∞–∑—É –∞–±–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—ñ–¥–∫–∞–∑–æ–∫ –≤—É–ª–∏—Ü—å
  const [showHouseNumberSuggestions, setShowHouseNumberSuggestions] =
    useState(false); // –î–ª—è –ø–æ–∫–∞–∑—É –∞–±–æ –ø—Ä–∏—Ö–æ–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—ñ–¥–∫–∞–∑–æ–∫ –Ω–æ–º–µ—Ä—ñ–≤ –±—É–¥–∏–Ω–∫—ñ–≤
  const [apartmentNumberInputValue, setApartmentNumberInputValue] =
    useState('');
  const [warehouseInputValue, setWarehouseInputValue] = useState('');
  const [warehouseSuggestions, setWarehouseSuggestions] = useState([]);
  const [selectedWarehouse, setSelectedWarehouse] = useState(null);
  const [showWarehouseSuggestions, setShowWarehouseSuggestions] =
    useState(false);

  console.log(selectedWarehouse);
  console.log(showWarehouseSuggestions);

  const handleFocusCiti = () => {
    const fetchCities = async () => {
      try {
        const data = await getNovaPoshtaCities(''); // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ –ø–æ—Ä–æ–∂–Ω—ñ–º –∑–Ω–∞—á–µ–Ω–Ω—è–º –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –º—ñ—Å—Ç
        setSuggestions(data);
      } catch (error) {
        console.error(
          '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –º—ñ—Å—Ç –≤—ñ–¥ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏:',
          error
        );
      }
    };

    fetchCities();
  };
  const handleApartmentChange = value => {
    setApartmentNumberInputValue(value);
    if (onApartmentChange) {
      onApartmentChange(value); // üîº –ü–µ—Ä–µ–¥–∞—î–º–æ –≤–≥–æ—Ä—É
    }
  };
  const handleFocusWarehouse = async () => {
    try {
      let warehouseType = '';
      if (deliveryMethod === 'department') {
        warehouseType = 'Warehouse';
      } else if (deliveryMethod === 'postomat') {
        warehouseType = 'Postomat';
      }

      const data = await getNovaPoshtaWarehouses(
        selectedCity.Ref,
        warehouseType
      );
      setWarehouseSuggestions(data);
      setShowWarehouseSuggestions(true); // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–∞–∑–æ–∫ –¥–ª—è –≤—ñ–¥–¥—ñ–ª–µ–Ω—å/–ø–æ—à—Ç–æ–º–∞—Ç—ñ–≤
    } catch (error) {
      console.error(
        '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –≤—ñ–¥–¥—ñ–ª–µ–Ω—å/–ø–æ—à—Ç–æ–º–∞—Ç—ñ–≤ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏:',
        error
      );
    }
  };
  useEffect(() => {
    if (inputValue.trim() !== '') {
      const fetchCities = async () => {
        try {
          const data = await getNovaPoshtaCities(inputValue); // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑ –Ω–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º
          setSuggestions(data);
        } catch (error) {
          console.error(
            '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –º—ñ—Å—Ç –≤—ñ–¥ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏:',
            error
          );
        }
      };

      fetchCities();
    } else {
      setSuggestions([]); // –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–∞–∑–æ–∫, —è–∫—â–æ –ø–æ–ª–µ –≤–≤–æ–¥—É –ø–æ—Ä–æ–∂–Ω—î
    }
  }, [inputValue]);

  useEffect(() => {
    if (selectedCity && deliveryMethod !== '') {
      const fetchWarehouses = async () => {
        try {
          let warehouseType = '';
          if (deliveryMethod === 'department') {
            warehouseType = 'Warehouse';
          } else if (deliveryMethod === 'postomat') {
            warehouseType = 'Postomat';
          }

          const data = await getNovaPoshtaWarehouses(
            selectedCity.Ref,
            warehouseType
          );
          setWarehouses(data);
        } catch (error) {
          console.error(
            '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –≤—ñ–¥–¥—ñ–ª–µ–Ω—å/–ø–æ—à—Ç–æ–º–∞—Ç—ñ–≤ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏:',
            error
          );
        }
      };

      fetchWarehouses();
    }
  }, [selectedCity, deliveryMethod]);

  const handleSelectCity = city => {
    setInputValue(city.Description);
    setSelectedCity(city);
    setSuggestions([]);
    setWarehouseInputValue('');
    setWarehouseSuggestions([]);
    setShowSuggestions(false);
    onUpdateCity(city);
  };

  const handleCheckboxChange = event => {
    const { name } = event.target;
    setDeliveryMethod(name); // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–∞–Ω–∏–π –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏
  };

  const handleStreetSearch = async searchString => {
    setStreetInputValue(searchString); // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –≤–≤–µ–¥–µ–Ω–Ω—è –≤—É–ª–∏—Ü—ñ
    if (searchString.trim() !== '') {
      try {
        const data = await getNovaPoshtaStreets(selectedCity.Ref, searchString);
        setStreets(data);
        setShowStreetSuggestions(true); // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–∞–∑–æ–∫ –¥–ª—è –≤—É–ª–∏—Ü—å
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –≤—É–ª–∏—Ü—å:', error);
      }
    } else {
      setStreets([]); // –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–∞–∑–æ–∫, —è–∫—â–æ –ø–æ–ª–µ –≤–≤–æ–¥—É –ø–æ—Ä–æ–∂–Ω—î
      setShowStreetSuggestions(false); // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–∞–∑–æ–∫ –¥–ª—è –≤—É–ª–∏—Ü—å
    }
  };

  const handleSelectStreet = street => {
    setStreetInputValue(street.Description);
    setSelectedStreet(street);
    setStreets([]);
    setShowStreetSuggestions(false); // –ü—Ä–∏ –≤–∏–±–æ—Ä—ñ –≤—É–ª–∏—Ü—ñ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–∞–∑–æ–∫
    onUpdateStreet(street);
  };

  const handleHouseNumberSearch = async searchString => {
    setHouseNumberInputValue(searchString); // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –±—É–¥–∏–Ω–∫—É
    if (searchString.trim() !== '' && selectedStreet) {
      try {
        const data = await getNovaPoshtaHouseNumbers(
          selectedCity.Ref,
          selectedStreet.Ref,
          searchString
        );
        setHouseNumbers(data);
        setShowHouseNumberSuggestions(true); // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–∞–∑–æ–∫ –¥–ª—è –Ω–æ–º–µ—Ä—ñ–≤ –±—É–¥–∏–Ω–∫—ñ–≤
      } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –±—É–¥–∏–Ω–∫—ñ–≤:', error);
      }
    } else {
      setHouseNumbers([]); // –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–∞–∑–æ–∫, —è–∫—â–æ –ø–æ–ª–µ –≤–≤–æ–¥—É –ø–æ—Ä–æ–∂–Ω—î –∞–±–æ –≤—É–ª–∏—Ü—è –Ω–µ –≤–∏–±—Ä–∞–Ω–∞
      setShowHouseNumberSuggestions(false); // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–∞–∑–æ–∫ –¥–ª—è –Ω–æ–º–µ—Ä—ñ–≤ –±—É–¥–∏–Ω–∫—ñ–≤
    }
  };

  const handleSelectHouseNumber = houseNumber => {
    setHouseNumberInputValue(houseNumber.Description);
    setHouseNumbers([]);
    setShowHouseNumberSuggestions(false); // –ü—Ä–∏ –≤–∏–±–æ—Ä—ñ –Ω–æ–º–µ—Ä–∞ –±—É–¥–∏–Ω–∫—É –ø—Ä–∏—Ö–æ–≤—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–∞–∑–æ–∫
    onUpdateHouseNumber(houseNumber);
  };
  const handleBlurHouseNumber = () => {
    // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –∑ –ø—ñ–¥–∫–∞–∑–æ–∫, –∞–ª–µ —â–æ—Å—å –≤–≤–µ–¥–µ–Ω–æ ‚Äî –ø–µ—Ä–µ–¥–∞—î–º–æ —è–∫ –≤–ª–∞—Å–Ω–∏–π —Ç–µ–∫—Å—Ç
    if (!houseNumbers.find(h => h.Description === houseNumberInputValue)) {
      onUpdateHouseNumber({ Description: houseNumberInputValue });
    }
    setShowHouseNumberSuggestions(false); // —Ö–æ–≤–∞—î–º–æ –ø—ñ–¥–∫–∞–∑–∫–∏ –ø—Ä–∏ –≤—Ç—Ä–∞—Ç—ñ —Ñ–æ–∫—É—Å—É
  };
  const handleWarehouseSearch = async searchString => {
    setWarehouseInputValue(searchString);

    if (searchString.trim() !== '') {
      try {
        const warehouseType =
          deliveryMethod === 'department' ? 'Warehouse' : 'Postomat';
        const data = await getNovaPoshtaWarehouses(
          selectedCity.Ref,
          warehouseType
        );
        // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —Å–ø–∏—Å–∫—É –ø—ñ–¥–∫–∞–∑–æ–∫ –∑–∞ –≤–≤–µ–¥–µ–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º
        const filteredWarehouses = data.filter(warehouse =>
          warehouse.Description.toLowerCase().includes(
            searchString.toLowerCase()
          )
        );

        setWarehouseSuggestions(filteredWarehouses);
      } catch (error) {
        console.error(
          '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É —Å–∫–ª–∞–¥—ñ–≤/–ø–æ—à—Ç–æ–º–∞—Ç—ñ–≤:',
          error
        );
      }
    } else {
      setWarehouseSuggestions([]);
    }
  };

  const handleSelectWarehouse = warehouse => {
    setWarehouseInputValue(warehouse.Description);
    setSelectedWarehouse(warehouse);
    setWarehouseSuggestions([]);
    onUpdateWarehouses(warehouse);
  };

  return (
    <div className={styles['city-input']}>
      <p>–ú—ñ—Å—Ç–æ</p>
      <input
        type="text"
        value={inputValue}
        onChange={e => setInputValue(e.target.value)}
        placeholder="–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ..."
        className={styles['input-field']}
        onFocus={handleFocusCiti}
      />

      {showSuggestions && suggestions.length > 0 && (
        <ul className={styles['suggestions-list']}>
          {suggestions.map(city => (
            <li
              key={city.Ref}
              onClick={() => handleSelectCity(city)}
              className={styles['suggestion-item']}
            >
              {city.Description}
            </li>
          ))}
        </ul>
      )}
      {selectedCity && (
        <div className={styles['delivery-methods']}>
          <label>
            <input
              type="radio"
              name="department"
              checked={deliveryMethod === 'department'}
              onChange={handleCheckboxChange}
            />
            –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏
          </label>
          <label>
            <input
              type="radio"
              name="postomat"
              checked={deliveryMethod === 'postomat'}
              onChange={handleCheckboxChange}
            />
            –ü–æ—à—Ç–æ–º–∞—Ç –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏
          </label>
          <label>
            <input
              type="radio"
              name="courier"
              checked={deliveryMethod === 'courier'}
              onChange={handleCheckboxChange}
            />
            –ö—É—Ä º—î—Ä–æ–º –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏
          </label>
        </div>
      )}

      {/* –Ü–Ω–ø—É—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –æ–±—Ä–∞–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É –¥–æ—Å—Ç–∞–≤–∫–∏ */}
      {deliveryMethod === 'department' && warehouses.length > 0 && (
        <div className={styles['inputs-container']}>
          –ü—É–Ω–∫—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
          <input
            type="text"
            value={warehouseInputValue}
            onChange={e => handleWarehouseSearch(e.target.value)}
            placeholder="–í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è"
            className={styles['input-field']}
            onFocus={handleFocusWarehouse}
          />
          {warehouseSuggestions.length > 0 && (
            <ul className={styles['suggestions-list']}>
              {warehouseSuggestions.map(warehouse => (
                <li
                  key={warehouse.Description}
                  onClick={() => handleSelectWarehouse(warehouse)}
                  className={styles['suggestion-item']}
                >
                  {warehouse.Description}
                </li>
              ))}
            </ul>
          )}
        </div>
      )}
      {deliveryMethod === 'postomat' && warehouses.length > 0 && (
        <div className={styles['inputs-container']}>
          –ü—É–Ω–∫—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
          <input
            type="text"
            value={warehouseInputValue}
            onChange={e => handleWarehouseSearch(e.target.value)}
            placeholder="–í–∏–±–µ—Ä—ñ—Ç—å –ø—É–Ω–∫—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è"
            className={styles['input-field']}
            onFocus={handleFocusWarehouse}
          />
          {warehouseSuggestions.length > 0 && (
            <ul className={styles['suggestions-list']}>
              {warehouseSuggestions.map(warehouse => (
                <li
                  key={warehouse.Description}
                  onClick={() => handleSelectWarehouse(warehouse)}
                  className={styles['suggestion-item']}
                >
                  {warehouse.Description}
                </li>
              ))}
            </ul>
          )}
        </div>
      )}
      {deliveryMethod === 'courier' && (
        <div className={styles['inputs-container']}>
          {/* –í—É–ª–∏—Ü—è */}
          <div className={styles['street-input']}>
            –í—É–ª–∏—Ü—è
            <input
              type="text"
              value={streetInputValue}
              onChange={e => handleStreetSearch(e.target.value)}
              placeholder="–í–≤–µ–¥—ñ—Ç—å –≤—É–ª–∏—Ü—é..."
              className={styles['input-field']}
            />
            {showStreetSuggestions && streets.length > 0 && (
              <ul className={styles['suggestions-list']}>
                {streets.map(street => (
                  <li
                    key={street.Ref}
                    onClick={() => handleSelectStreet(street)}
                    className={styles['suggestion-item']}
                  >
                    {street.Description}
                  </li>
                ))}
              </ul>
            )}
          </div>

          {/* –ë—É–¥–∏–Ω–æ–∫ */}
          <div className={styles['house-number-input']}>
            –ë—É–¥–∏–Ω–æ–∫
            <input
              type="text"
              value={houseNumberInputValue}
              onChange={e => handleHouseNumberSearch(e.target.value)}
              onFocus={() => {
                if (houseNumberInputValue) {
                  handleHouseNumberSearch(houseNumberInputValue);
                }
              }}
              onBlur={handleBlurHouseNumber}
              placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É..."
              className={styles['input-field']}
            />
            {showHouseNumberSuggestions && houseNumbers.length > 0 && (
              <ul className={styles['suggestions-list']}>
                {houseNumbers.map(houseNumber => (
                  <li
                    key={houseNumber.Ref}
                    onClick={() => handleSelectHouseNumber(houseNumber)}
                    className={styles['suggestion-item']}
                  >
                    {houseNumber.Description}
                  </li>
                ))}
              </ul>
            )}
          </div>

          {/* –ö–≤–∞—Ä—Ç–∏—Ä–∞ */}
          <div className={styles['apartment-number-input']}>
            –ö–≤–∞—Ä—Ç–∏—Ä–∞
            <input
              type="text"
              value={apartmentNumberInputValue}
              onChange={e => handleApartmentChange(e.target.value)}
              placeholder="‚Ññ –∫–≤–∞—Ä—Ç–∏—Ä–∏..."
              className={styles['input-field']}
            />
          </div>
        </div>
      )}
    </div>
  );
};

export default CityInput;
